// 查找：1.二分查找递归算法

int Binary_SearchR(SSTable ST, int key,int left, int right)
{
	if(left > right)
		return 0;
	int mid = (right - left) / 2;
	if(ST.elem[left] < key)
		return Binary_SearchR(ST, key, mid + 1, right);
	else if(ST.elem[left] > key)
		return Binary_SearchR(ST, key, left, mid - 1);
	else
		return mid;
}	




// 查找：2.为提高查找效率，每次将所查元素和前一个元素交换
int SeqSrch(RcdType R[], int k)
{
	int i = 0;
	while((R[k].key != k) && (i < n))
	{
		i++;
	}
	if(i < n && i > 0)
	{
		temp = R[i].key;
		R[i].key = R[i - 1].key;
		R[i - 1].key = temp;
		return --i;
	}
	else
		 return -1;
}



// 查找：3.判断一棵二叉树是否是二叉排序树
int predt = -312654;

int JudgeBST(BiTree bt)
{
	int b1, b2;
	if(bt == NULL)
		return 1;
	else
	{
		b1 = JudgeBST(bt->lchild);		// 检查左子树
		if(b1 == 0 || predt >= bt->data)	// 如果前驱节点大于根节点则返回false
			return 0;
		predt = bt->data;			// 替换前驱节点的值
		b2 = JudgeBST(bt->rchild);		// 检查右子树
		return b2;				// 返回
	}
}



// 查找：4.计算指定节点所在二叉排序的层次
int level(BiTree bt, BSTNode *p)
{
	int n = 0;
	BiTree t = bt;		// 保存根节点指针
	if(bt != NULL)
	{
		n++;
		while(t->data != p->data)	// 当前节点不是所找节点，则进入循环
		{
			if(p->data < t->data)	// 小于所找节点，接下来搜索左子树
				t = t->lchild;
			else			// 大于所找节点，搜索右子树
				t = t->rchild;
			n++;			// 层次加1
		}
	}
	return n;
}


// 查找：5.判断二叉树是否是平衡二叉树（后序遍历）

void Judge_AVL(BiTree bt, int &balance, int &h)
{
	int bl = 0, br = 0, hl = 0, hr = 0;	// 左右子树的平衡标志和左右子树的高度
	if(bt == NULL)			// 如果根节点为空，则一定平衡
	{
		h = 0;
		balance = 1;
	}
	else if(bt->lchild == NULL && bt->rchild == NULL)	// 左右孩子为空，平衡
	{
		h = 1;
		balance = 1;
	}
	else
	{
		Judge_AVL(bt->lchild, bl, hl);		// 递归扫描左子树
		Judge_AVL(bt->rchild, br, hr);		// 递归扫描右子树
		h = (hl > hr ? hl : hr) + 1;		// 高度等于左右子树的高度大者加1
		if(abs(hl - hr) < 2)			// 如果左右高度相差不超过1，则平衡
			balance = bl && br;
		else
			balance = 0;
	}
}



// 查找：6.找出二叉排序树中的最大和最小值

int MinKey(BSTNode *bt)		// 最左边的叶节点
{
	while(bt->lchild != NULL)
		bt = bt->lchild;
	return bt->data;
}

int MaxKey(BSTNode *bt)		// 最有右边的叶节点
{
	while(bt->rchild != NULL)
		bt = bt->rchild;
	return bt->data;
}



// 查找：7.降序输出二叉排序树中值大于k的节点

void OutPut(BSTNode *bt, int k)		// 从右子树开始扫描，达到降序输出节点的效果
{
	if(bt == NULL)
		return ;
	if(bt->rchild != NULL)
		OutPut(bt->rchild, k);
	if(bt->data >= k)
		cout << bt->data << endl;
	if(bt->lchild != NULL)
		OutPut(bt->lchild, k);
}




// 查找：8.找出二叉排序树中第k小的元素

BSTNode *Search_Small(BSTNode *t, int k)
{
	if(k < 1 || k > t->count) return NULL;	// k值非法
	if(t->lchild == NULL)		// 左孩子为空，且k等于1，则返回根节点，否则递归扫描右子树
	{
		if(k == 1) return t;
		else return Search_Small(t->rchild, k-1);
		
	}
	else
	{
		if(t->lchild->count == k - 1) return t;	// 如果左子树的节点计数器==k值-1则，根节点就是所找节点。
		if(t->lchild->count > k - 1) return Search_Small(t->lchild, k);	// 计数器大于k-1（所找节点一定在左子树中），递归扫描左子树
		if(t->lchild->count < k - 1) return Search_Small(t->rchild, k - (t->lchild->count + 1));// 计数器小于k-1，则在右子树中，递归的扫描右子树（k值调整为：k减去左子树的计数器再减1,1表示根节点），当前k值也是递归的深度。
	}
}
