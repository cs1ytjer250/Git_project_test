// 树：1.后序遍历二叉树的非递归算法(借助栈)

void PostOrder(BiTree T)
{
	SqStack S;
	InitStack(S);
	BiTNode *p = T;
	r = NULL;
	while(p || !IsEmpty(S))
	{
		if(p)			// 将所有树几点入栈
		{
			push(S, p);
			p = p->lchild;
		}
		else			// 对所有节点进行出栈
		{
			GetTop(S, p);	// 获取栈顶元素，并判断其是否有右孩子
			if(p->rchild && p->rchild != r)
				p = p->rchild;
			else		// 没有右孩子则弹出栈顶元素，并打印，将r指向p，p置为空
			{
				pop(S, p);
				visit(p->data);
				r = p;
				p = NULL;
			}
		}
	}
	
}


// 树：2.层序遍历的反向(借助栈和队列)
// 利用队列的先进先出和栈的后进先出特效，对其进行翻转
void InvertLevel(BiTree bt)
{
	Stack S, Queue Q;
	BiTNode *p;
	if(bt != NULL)
	{
		InitStack(S);
		InitQueue(Q);
		EnQueue(Q, bt);		// 将根节点入栈
		while(IsEmpty(Q) == false)	// 当队列不空时，出队并入栈
		{
			DeQueue(Q, p);	
			Push(S, p);
			if(p->lchild)	// 如果出队元素有左右孩子，则都入队
				EnQueue(Q, p->lchild);
			if(p->lchild)
				EnQueue(Q, p->rchild);
		}
		while(IsEmpty(S) == false)	// 当栈不空时，出栈元素并打印。
		{
			Pop(S, p);
			visit(p->data);
		}
	}
}


// 树：3.计算二叉链表的高度

// 解法1：非递归（借助队列）
int Btdepth(BiTree T)
{
	if(!T)			// 根节点为空
		return 0;
	int front = rear = -1;
	int last = level = 0;
	BiTNode *Q[MaxSize];
	Q[++rear] = T;
	BiTree p;
	while(front < rear)
	{
		p = Q[++front];	// 出队，并检查是否有左右孩子，如果有则入队
		if(p->lchild)
			Q[++rear] = p->lchild;
		if(p->rchild)
			Q[++rear] = p->rchild;
		if(front == last)	// 当队头指针等于该层最右边的孩子，则level加1，并将last更新为下一层最右的节点
		{
			level++;
			last = rear;
		}
	}
	return level;		// level即为层数
}


// 解法2：递归
int Btdepth2(BiTree T)
{
	if(T == NULL)
		return 0;
	ldep = Btdepth2(T->lchild);	// 递归的调用左子树
	rdep = Btdepth2(T->rchild);	// 递归的调用右子树
	if(ldep > rdep)		// 判断左深度和右深度的大小，大的一边加1并返回
		return ldep + 1;
	else
		return rdep + 1;
}



// 树：4.通过先序和中序，构建二叉树（递归）
BiTree PerInCreat(char a[], char b[], int l1, int h1, int l2, int h2)
{
	root = (BiTNode*)malloc(sizeof(BiTNode));
	root->data = a[l1];
	int i;
	for(i = l2; b[i] != root->data; i++);
	int llen = i - l2;
	int rlen = h2 - i;
	if(llen)		// 对左半边进行构建
		root->lchild = PreInCreat(a, b, l1 + 1, l1 + llen, l2, l2 + llen -1);
	else		
		root->lchild = NULL;
	if(rlen)		// 对右半边进行构建
		root->rchild = PreInCreat(a, b, h1 - rlen + 1, h1, h2 - rlen + 1, h2);
	else
		root->rchild = NULL;
	return root;
}



// 树：6.计算一棵二叉树中双分支的个数（递归）

int DsonNodes(BiTree b)
{
	if(b == NULL)
		return 0;
	else if(b->lchild != NULL && b->rchild != NULL)		// 计算双分支节点的个数
		return DsonNodes(b->lchild) + DsonNodes(b->rchild) + 1;
	else
		return DsonNodes(b->lchild) + DsonNodes(b->rchild);
}



// 树：7.对一棵二叉链表进行左右子树的交换(递归)

void swap(BiTree b)
{
	if(b)
	{
		swap(b->lchild);		// 对左子树进行交换
		swap(b->rchild);		// 对右子树进行交换
		BiTNode *temp;		
		temp = b->lchild;		// 左右子树交换
		b->lchild = b->rchild;
		b->rchild = temp;
	}
}



// 树：8.求二叉链表，先序遍历中第k个节点（递归）

int i = 1;				// 记录先序遍历的顺序
int PreNode(BiTree b, int k)
{
	if(b == NULL)		// 节点为空，则返回特定字符
		return '#';
	if(i == k)			// 当i == k时，找到所求节点，返回data域
		return b->data;
	i++;			// 每遍历一个节点，i加1
	int ch = PreNode(b->lchild, k);
	if(ch != '#')		// 所求节点在左子树中
		return ch;
	ch = PreNode(b->rchild, k);
	return ch;
}


// 树：9.删除二叉链表中，以元素值x为根的所有节点

void DeleteXTree(BiTree &bt)		// 递归删除给定节点的左右子树
{
	if(bt)
	{
		DeleteXTree(bt->lchild);
		DeleteXTree(bt->rchild);
		free(bt);
	}
}

void Search(BiTree bt, int x)
{
	BiTree Q[];
	BiTNode *p;
	if(bt)
	{
		if(bt->data == x)		// 找到节点x，调用删除函数
		{
			DeleteXTree(bt);
			exit(0);
		}
		InitQueue(Q);
		EnQueue(Q, bt);
		while(!IsEmpty(Q))		// 队列不空时进入循环
		{
			DeQueue(Q, p);
			if(p->lchild)	// 判断左孩子是否是所找节点
			{
				if(p->lchild->data == x)
				{
					DeleteXTree(p->lchild);
					p->lchild = NULL;
				}
				else	// 不是，则继续往下搜索左子树
					EnQueue(Q, p->lchild);
			}
			if(p->rchild)	// 判断右孩子是否是所找节点
			{
				if(p->rchild->data == x)
				{
					DeleteXTree(p->rchild);
					p->rchild = NULL;
				}
				else	// 不是，则继续往下搜索右子树
					EnQueue(Q, p->rchild);
			}
		}
	}
}


// 树：10.输出二叉树中值为x的所有父节点（借助栈）

void Search(BiTree bt, int x)
{
	stack s[];
	top = 0;
	while(bt != NULL || top > 0)
	{
		while(bt != NULL && bt->data != x)	// 根节点的所有左子树入栈，并将左标记标为0
		{
			s[++top].t = bt;
			s[top].tag = 0;
			bt = bt->lchild;
		}
		if(bt != NULL && bt->data == x)	// 找到x节点，输出所有元素
		{
			cout << "所查节点的所有祖先节点的值为：" << endl;
			for(int i = 1; i <= top; i++)
			{
				cout << "%d" << s[i].t->data << endl;
				exit(1);
			}
		}
		while(top != 0 && s[top].tag == 1)	// 左右节点都访问过后，弹出栈顶元素
			top--;
		if(top != 0)			// 访问右子树
		{
			s[top].tag = 1;
			bt = s[top].t->rchild;
		}
	}
}


// 树：11.找到二叉树中Q和P的最近祖先节点（借助栈）

stack s[], s1[];
BiTree Ancestor(BiTree root, BiTNode *p, BiTNode *q)
{
	top = 0; bt = root; top1;
	while(bt != NULL || top > 0)
	{
		while(bt != NULL)		// 根节点的所有左子树入栈，并将左标记标为0
		{
			s[++top].t = bt;
			s[top].tag = 0;
			bt = bt->lchild;
		}
		while(top != 0 && s[top].tag == 1)	// 当栈不空，且栈顶元素的右子树也在栈中时，进入循环
		{
			if(s[top].t == p)		// 如果栈顶元素是目标节点p，则将当前栈中元素保存到辅助栈。并将栈顶指针赋值给辅助指针（认为目标节点p在目标节点q左侧）
			{
				for(int i = 1; i <= top; i++)
				{
					s1[i] = s[i];
					top1 = top;
				}
			}
			if(s[top].t == q)		// 如果栈顶元素是q，则弹出工作栈顶元素和辅助栈顶元素，如果弹出元素是同一元素，则返回工作栈栈顶指针
			{
				for(int i = top; i > 0; i--)
				{
					for(int j = top1; j > 0; j--)
					{
						if(s1[j].t == s[i].t)
							return s[i].t
					}
				}
			}
			top--;			// 如果栈顶元素既不为p也不为q则弹出栈顶元素。
		}
		if(top != 0)			// 访问右子树
		{
			s[top].tag = 1;
			bt = s[top].t->rchild;
		}
	}
	return NULL;				// 没有公共祖先节点
}


// 树：12.求二叉链表的最大宽度

int BTWidth(BiTree b)
{
	BiTree p;
	int k, max, i, n;
	Qu.front = Qu.rear = -1;
	Qu.rear++;
	Qu.data[Qu.rear] = b;
	Qu.level[Qu.rear] = 1;		// 用于保存每个节点的所在层次
	while(Qu.front < Qu.rear)
	{
		Qu.front++;
		p = Qu.data[Qu.front];	// p为出队元素
		k = Qu.level[Qu.front];	// k为出队元素的层次
		if(p->lchild != NULL)	// 将p的左孩子入队，并将其孩子节点的层次加1
		{
			Qu.rear++;
			Qu.data[Qu.rear] = p->lchild;
			Qu.level[Qu.rear] = k + 1;
		}
		if(p->rchild != NULL)	// 将p的右孩子入队，并将其孩子节点的层次加1
		{
			Qu.rear++;
			Qu.data[Qu.rear] = p->rchild;
			Qu.level[Qu.rear] = k + 1;
		}
	}
	max = 0; i = 0;			// max为最大宽度
	k = 1;
	while(i <= Qu.rear)			// 计算宽度
	{
		n = 0;
		while(i <= Qu.rear && Qu.level[i] == k)		// 计算层次相同的节点数量
		{
			n++;
			i++;
		}
		k = Qu.level[i];		// 下一层
		if(n > max) max = n;	// 更新max的值
	}
	return max;
}



// 树：13.满二叉树，由先序序列求得后序序列

void PreToPost(char pre[], int l1, int h1, char post[], int l2, int h2)
{
	int half;
	if(h1 >= l1)
	{
		post[h2] = pre[l1];		// 先序的第一个节点，是后序的最后一个节点（仅满二叉树适用）
		half = (h1 - l1) / 2;		// 划分左右两个部分
		PreToPost(pre, l1 + 1, l1 + half, post, l2, l2 + half - 1);	// 先序序列的左半部分
		PreToPost(pre, l1 + half + 1, h1, post, l2 + half, h2 - 1);	// 先序序列的右半补分
	}
}  



// 树：14.将二叉链表的叶节点，从左至右顺序连接为一个单链表（递归）
LinkList head, pre = NULL;		// pre为当前节点的前驱
LinkList InOrder(BiTree bt)
{
	if(bt)
	{
		InOrder(bt->lchild);	// 对根节点的左孩子进行链接
		if(bt->lchild == NULL && bt->rchild == NULL)	// 如果是叶子节点，则将pre的后继指向该节点，并把pre移到该节点
		{
			if(pre == NULL)		// 如果是第一个节点，将其设为头结点，并将pre指向该节点
			{
				head = bt;
				pre = bt;
			}
			else			
			{
				pre->rchild = bt;
				pre = bt;
			}
		}
		InOrder(bt->rchild);		// 对根节点的右孩子进行链接
		pre->rchild = NULL;	// 最后将pre的后继指向空
	}
	return head;			// 返回头指针
}



// 树：15.判断两棵二叉树是否相似(递归)

int similar(BiTree T1, BiTree T2)
{
	int leftS, rightS;
	if(T1 == NULL && T2 == NULL)	// 如果两个节点为空，则相似
		return 1;
	else if(T1 == NULL || T2 == NULL)	// 有一个不为空，则不相似
		return 0;
	else
	{
		leftS = similar(T1->lchild, T2->lchild);	// 对左孩子进行比对，并用左标志接收
		rightS = similar(T1->lchild, T2->rchild);	// 对右孩子进行比对，并用右标志接收
		return leftS && rightS;		// 对比左右标志位，相同则为1，相异则为0
	}
}



// 树：16. 线索二叉树中，找到中序序列中k节点，在后序遍历中的前驱节点
BiThrTree InPostPre(BiThrTree t, BiThrTree p)
{
	BiThrTree q;
	if(p->rtag == 0)		// 如果右标志为0，则该节点的后序前驱为其右孩子
	{
		q = p->rchild;
	}
	else if(p->ltag == 0)	// 如果左标志为0，则该节点的后序前驱为其左孩子
		q = p->lchild;
	else if(p->lchild == NULL)	// 如果该节点，没有左孩子，则没有前驱节点
		q = NULL;
	else
	{
		while(p->ltag == 1 && p->lchild != NULL)	// 如果左标志为1，且有左孩子，则往上找前驱，直到找到第一个节点。
			p = p->lchild;
		if(p->ltag == 0)			// 如果左标志位为0，则该节点的后序前驱为其左孩子
			q = p->lchild;
		else				// 该节点，既没有前驱，也没有左孩子，则该节点没有后序前驱。
			q = NULL
	}
	return q;		// 返回后序前驱节点
}



// 树：17. 求二叉链表的带权路径长度（WPL：所有节点的深度与权值之积的总和）
// 基于先序遍历思想
int WPL(BiTree root)			// 算法入口
{
	return wpl_PreOrder(root, 0);
}

int wpl_PreOrder(BiTree root, int deep)
{
	static int wpl = 0;		// 用一个静态变量保存，带权路径长度
	if(root->lchild == NULL && root->rchild == NULL)
		wpl += deep * root->weight;	// 该节点为叶子节点，则将其所在深度和权值之积，加到wpl
	if(root->lchild != NULL)	// 有左孩子，深度加1
		wpl_PreOrder(root->lchild, deep + 1);
	if(root->rchild != NULL)	// 有右孩子，深度加1
		wpl_PreOrder(root->rchild, deep + 1);
	return wpl;
}



// 树：18.将中序序列转为中缀表达式（递归）

void BtreeToE(BTree *root)			// 程序入口
{
	BtreeToExp(root, 1);
}

void BtreeToExp(BTree *root, int deep)
{
	if(root == NULL) return;	// 根节点为空，返回
	else if(root->left == NULL && root->right == NULL)	// 没有左右孩子，输出该节点
		cout << root->data;
	else		// 有左或右孩子
	{
		if(deep > 1) cout << "(";	// 如果深度大于1，则加括号
		BtreeToExp(root->left, deep + 1);	// 有左孩子，深度加1
		cout << root->data;	// 输出根节点
		BtreeToExp(root->right, deep + 1);	// 有右孩子，深度加1
		if(deep > 1) cout << ")";	// 如果深度大于1，则加括号
	}
}



// 树：19.求孩子兄弟法存储的森林（树）叶节点个数
// 如果一个节点没有左孩子则一定是叶子节点，这时叶节点数加1，同时搜索右兄弟
int Leaves(Tree t)
{
	if(t == NULL)
		return 0;
	if(t->fch == NULL)		// 如果左孩子为空，则递归搜索右兄弟，同时叶节点个数加1
		return 1 + Leaves(t->nsib);
	else			// 如果右左孩子，则进入下一层的递归调用
		return Leaves(t->fch) + Leaves(t->nsib);
}



// 树：20.求孩子兄弟法存储的森林（树）深度（递归）
// 递归搜索左孩子和右兄弟，二者只要有其一，则深度加1，最后返回两者中的大者加1（根节点）
int Height(CSTree bt)
{
	int hc, hs;
	if(bt == NULL)
		return 0;
	else
	{
		hc = Height(bt->firstchild);
		hs = Height(bt->nextsibling);
		if(hc + 1 > hs)
			return hc + 1;
		else
			return hs;
	}
}


// 树：21.根据节点的度和层序序列，构造树
// 通过度，判断该节点有几个分支，通过层序序列，链接兄弟
#define maxNodex 15
void creatCSTree_Degree(CSTree &T, int e[], int degree[], int n)
{
	CSNode *pointer = new CSNode[maxNodex];
	int i, j, d, k = 0;
	for(i = 0; i < n; i++)		// 初始化所有节点，将左孩子右兄弟指针置空
	{
		pointer[i]->data = e[i];
		pointer[i]->lchild = pointer[i]->rsibling = NULL;
	}
	for(i = 0; i < n; i++)
	{
		d = degree[i];	// 获取每个节点的度
		if(d)		// 当度不为0
		{
			k++;	// 声明下标
			pointer[i]->lchild = pointer[k];	// 链接左孩子
			for(j = 2; j <= d; j++)		// 链接右兄弟
			{
				k++;
				pointer[k - 1]->rsibling = pointer[k];	// 从左至右链接
			}
		}
	}
	T = pointer[0];	// 头指针指向第一个节点
	delete[] pointer;	// 回收内存空间
}