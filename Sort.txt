// 排序：1.双向起泡

void BubbleSort(int a, int n)
{
	int low = 0, high = n-1;
	bool flag = true;	// 标志，表明是否进行过排序
	while(low < high && flag)
	{
		flag = false;	// 标志置为false
		for(i = low; i < high; i++)
		{
			if(a[i] > a[i + 1])	// 从左往右，找到最大的数，并修改标志的值
			{
				swap(a[i], a[i + 1])
					flag = true;
			}
		}
		high--;			// 右下标左移
		for(i = high; i > low; i--)	// 从右往左，找到最小的数，并修改标志的值
		{
			if(a[i] < a[i - 1])
			{
				swap(a[i], a[i - 1]);
				flag = true;
			}
		}
		low++;			// 左下标右移
	}
}


// 排序：2.排序顺序线性表，奇数在前，偶数在后（快排思想）
void move(int a[], int len)
{
	int i = 0, j = len - 1;
	while(i < j)
	{
		while(i < j && a[i] % 2 != 0) i++;	// 从左往右，找第一个偶数
		while(i < j && a[j] % 2 != 1) j--;	// 从右往左，找第一个奇数
		if(i < j)				// 交换左右下边的元素
		{
			swap(a[i], a[j]);
			i++;
			j--;
		}
	}
}



// 排序：3.快排对枢轴进行随机挑选
int Partition2(int a[], int low, int high)
{
	int rand_index = low + rand() % (high - low + 1);
	swap(a[rand_index], a[low]);
	int pivot = a[low];
	int i = low;
	for(int j = low + 1; j <= high; j++)	// j为工作指针，i为顺序不合法元素指针
	{
		if(a[j] < pivot)
			swap(a[++i], a[j]);	// 找到小于基准元素的元素时，交换i和j。（交换前先将i值右移）
	}
	swap(a[i], a[low]);	// 最后将基准元素归位
	return i;		// 返回基准元素的下标
}


// 排序：4.找出第k小的元素

int kth_elem(int a[], int low, int high, int k)
{
	int pivot = a[low];
	int low_temp = low;			// 保存左下标
	int high_temp = high;		// 保存右下标
	while(low < high)			// 快排
	{
		while(low < high && a[high] >= pivot)
			--high;
		a[low] = a[high];
		while(low < high && a[low] <= pivot)
			++low;
		a[high] = a[low];
	}
	a[low] = pivot;
	if(low == k)		// 如果基准元素下标==k，则找到
		return a[low];
	else if(low > k)		// 基准元素下标大于k，则在基准元素左侧，递归扫描左侧元素
		return kth_elem(a, low_temp, low - 1, k);
	else 			// 基准元素下标小于k，则在基准元素右侧，递归扫描右侧元素
		return kth_elem(a, low + 1, high_temp, k);
}



// 排序：5.荷兰国旗（直接插入排序思想）

typedef enum{red, white, blue} color;		// 声明枚举数组
void flag_arrange(color a[], int n)
{
	int i = 0, j = 0, k = n-1;
	while(j <= k)
	{
		switch(a[j])		// 判断当前颜色
		{
			case red: swap(a[i], a[j]); i++; j++; break;	// 红色，交换ij元素，且ij右移
			case white: j++; break;			// 白色，右移j指针
			case blue: swap(a[i], a[k]); k--;			// 蓝色，交换ik元素，k左移
			// 为什么蓝色不移动j指针？因为如果右移会导致，交换以后还是蓝色，左移会导致交换以后是白色。
		}
	}
}




// 排序：6.将n个正整数分为a1和a2，且n1-n2最小，a1的和 ― a2的和最大(绝对值)

int setPartition(int a[], int n)
{
	int pivotkey, low = 0, low0 = 0, high = n-1, high0 = n-1, flag = 1, k = n/2, i;
	// flag：表示是否已经平均分配a1和a2.
	// k：中间元素下标
	int s1 = 0, s2 = 0;
	while(flag)
	{
		pivotkey = a[low];
		while(low < high)		// 快排
		{
			while(low < high && a[high] >= pivotkey) --high;
			if(low != high) a[low] = a[high];
			while(low < high && a[low] <= pivotkey) ++low;
			if(low != high) a[high] = a[low];
		}
		a[low] = pivotkey;
		if(low == k-1)		// 判断是否已经平均分配两个数组
			flag = 0;
		else			// 基准元素不等于k-1，则表明分配不平均
		{
			if(low < k-1)
			{
				low0 = ++low;	// 更新左下标为，基准元素下标加1
				high = high0;
			}
			else			// 更新右下标为，基准元素减1
			{
				high0 = --high;
				low = low0;
			}
		}
	}
	for(i = 0; i < k; i++) s1 += a[i];		// 加和
	for(i = k; i < n; i++) s2 += a[i];
	return s2 - s1;				// 判断大小
}



// 排序：7.简单选择排序，单链表（递增）
void selectSort(LinkList &L)
{
	LinkNode *h = L, *p, *q, *r, *s;
	L = NULL;
	while(h != NULL)			// 持续扫描原链表
	{
		p = s = h; q = r = NULL;
		// 指针s和r记忆最大节点和其前驱；p为工作指针，q为其前驱
		while(p != NULL)	// 扫描原链表寻找最大节点s
		{
			if(p->data > s->data){s = p; r = q;}	// 找到更大的，记忆它和它的前驱
			q = p; p = p->link;			// 继续寻找
		}
		if(s == h)
			h = h->link;			// 最大节点在原链表前端
		else
			 r->link = s->link;			// 最大节点在原链表表内
		s->link = L; L = s;				// 节点s插入结果链前端
	}
}



// 排序：8.判断一个顺序表是否构成小根堆

bool IsMinHeap(int a[], int len)
{
	if(len % 2 == 0)		// 数组长度为偶数
	{
		if(a[len / 2] > a[len])
			return false;
		for(int i = len / 2 - 1; i >= 1; i--)	// i初值为：n/2-1（小于n/2的节点，都是根节点），每趟扫描i左移
		{
			if(a[i] > a[2 * i] || a[i] > a[2 * i + 1])	// 如果根节点大于左右孩子，则不是小根堆
				return false;
		}
	}
	else			// 数组长度为奇数
	{
		for(int i = len / 2; i >= 1; i--)
		{
			if(a[i] > a[2 *i] || a[i] > a[2 * i + 1])
				return false;
		}
	}
	return true;		// 扫描完，全部元素，则是小根堆
}



// 排序：9.对一个数组进行排序，数组前m个元素递增，后n个元素递增

void Insert_Sort(int a[], int m, int n)
{
	int i, j;
	for(i = m+1; i <= m+n; i++)
	{
		a[0] = a[i];	// 哨兵
		for(j = i - 1; a[j] > a[0]; j--)	
			a[j+1] = a[j];	// 后移元素，直到找到第一个小于等于a[0]的元素
		a[j+1] = a[0];		// 将小于等于a[0]元素的后一个元素和a[0]交换
	}
}


// 排序：10.快排
int Partition(int k[], int n)
{
	int i = 1, j = n;
	int pivot = k[j];
	while(i < j)		// 快排，基准元素为末尾元素。
	{
		while(i < j && k[i] <= pivot)
			i++;
		if(i < j)
			k[j] = k[i];
		while(i < j && k[j] >= pivot)
			j--;
		if(i < j)
			k[i] = k[j];
	}
	k[i] = pivot;
	return i;			// 返回基准元素的下标
}