// 图：1.邻接表转为邻接矩阵
void Convert(ALGraph &G, int arcs[m][n])
{
	for(int i = 0; i < n; i++)	// 一次遍历各顶点表节点为头的边链表
	{
		p = (G->v[i]).firstarc;	// 取出顶点i的第一条出边
		while(p != NULL)		// 遍历边链表
		{
			arcs[i][p->adjvex] = 1;	
			p = p->nextarc;	// 取下一条出边
		}
	}
}


// 图：2.求邻接矩阵中EL路径（包含所有边，且长度为边数）

int IsExistEL(MGraph G)
{
	int degree, i, j, count = 0;
	for(i = 0; i < G.numVertices; i++)	// 遍历邻接矩阵的每一行
	{
		degree = 0;		
		for(j = 0; j < G.numVertices; j++)	// 记录每个节点的度数
			degree += G.Edge[i][j];
		if(degree % 2 != 0)		// 当节点度数为奇数时，计数器加1
			count++;
	}
	if(count == 0 || count == 2)		// 当计数器不为0或者2时，不存在EL路径
		return 1;
	else
		return 0;
}


// 图：3.判断一个无向图是否是一棵树（是否有n-1条边或无回路连通图）

bool isTree(Graph &G)
{
	for(int i = 1; i <= G.vexnum; i++)	// 初始化访问数组
	{
		visited[i] = FALSE;
	}
	int Vnum = 0, Enum = 0;		// 记录顶点数，和边数
	DFS(G, 1, Vnum, Enum, visited);	// 深度优先遍历无向图
	if(Vnum == G.vexnum && Enum == 2 * (G.vexnum - 1))	// 当记录顶点数和图顶点数相等，且边数等于2倍的定点数减1时，该无向图是一棵树
		return true;
	else
		return false;
}

// 深度优先遍历
void DFS(Graph &G, int v, int &Vnum, int &Enum, int visited[])
{
	visited[v] = TRUE; Vnum++;		// 将访问过的节点置为true，防止重复访问，记录顶点数加1
	int w = FirstNeighbor(G, v);		// 取出v顶点的第一个邻接顶点
	while(w != -1)			
	{
		Enum++;			// 记录边数加1
		if(!visited[w])		// 顶点未被访问过，则递归遍历该顶点的邻接顶点
			DFS(G, w, Vnum, Enum, visited);
		w = NextNeighbor(G, v, w);	// w=v顶点的邻接顶点w的下一个顶点
	}
}



// 图：4.图的深度优先遍历（邻接表存储图）
// 借助栈（非递归）
void DFS_Non_RC(AGraph &G, int v)
{
	int w;
	SqStack S;
	InitStack(S);
	for(int i = 0; i < G.vexnum; i++)	// 初始化访问数组
	{
		visited[i] = FALSE;
	}
	Push(S, v);visited[v] = TURE;		// 入栈顶点，并修改访问标记
	while(!IsEmpty(S))			// 栈不空，进入循环
	{
		k = Pop(S);		// k为栈顶元素
		visit(k);			// 输出栈顶元素
		for(w = FirstNeighbor(G, k); k >= 0; w = NextNeighbor(G, k, w))	// 循环遍历栈顶元素的下一个邻接顶点，每轮循环，顶点都往深处走
		{
			if(!visited[w])
			{
				Push(S, w);
				visited[w] = TRUE;
			}
		}
	}
}


// 图：5.判断一个有向图是否存在从i到j的路径
// 从i出发，如果在遍历时能访问到j则证明存在i到j的路径
// 深度优先遍历（递归）
int visited[MAXSIZE] = {0};
void DFS(ALGraph G, int i, int j, bool &can_reach)
{
	if(i == j)		// 如果存在路径，则修改记录变量
	{
		can_reach = true;
		return;
	}
	visited[i] = 1;
	for(int p = FirstNeighbor(G, i); p >= 0; p = NextNeighbor(G, i, p))
	{
		if(!visited[p] && !can_reach)
			DFS(G, p, j, can_reach);
	}
}

// 广度优先遍历(层序遍历思想)
int BFS(ALGraph G, int i, int j)
{
	InitQueue(Q); EnQueue(Q, i);
	while(!isEmpty(Q))
	{
		DeQueue(Q, u);
		visited[u] = 1;
		if(u == j) return 1;
		for(int p = FirstNeighbor(G, i); p; p = NextNeighbor(G, u, p))
		{
			if(p == j)
				return 1;
			if(!visited[p])
			{
				EnQueue(Q, p);
				visited[p] = 1;
			}
		}
	}
	return 0;
}


// 图：6.邻接表中，输出u到v的简单路径(所有顶点不重复)

void FindPath(AGraph *G, int u, int v, int path[], int d)
{
	int w, i;
	ArcNode *p;
	d++;			// 路径长度加1
	path[d] = u;		// 将当前顶点添加到路径中
	visited[u] = 1;		// 置已访问标记
	if(u == v)			// 找到一条路径则输出
		print(path[]);	// 输出路径上的节点
	p = G->adjlist[u].firstarc;	// p指向u的第一个相邻点
	while(p != NULL)		
	{
		w = p->adjvex;	// 如果顶点w未访问，递归访问它
		if(visited[w] == 0)
			FindPath(G, w, v, path, d);
		p = p->nextarc;	// p指向u的下一个相邻点
	}
	visited[u] = 0;		// 恢复环境，使该顶点可以重新使用
}



// 图：7. 用深度优先遍历对有向无环图进行拓扑排序
// 和深度优先遍历没有太大区别，拓扑序列为声明数组的从大到小排列
bool visited[MAX_VERTEX_NUM];
void DFSTraverse(Graph G)
{
	for(int v = 0; v < G.vexnum; v++)
		visited[v] = FALSE;
	time = 0;
	for(int v = 0; v < G.vexnum; ++v)
	{
		if(!visited[v]) DFS(G, v);
	}
}

void DFS(Graph G, int v)
{
	visited[v] = TRUE;
	visit(v);
	for(w = FirstNeighbor(G, v); w >= 0; w = NextNeighbor(G, v, w))
	{
		if(!visited[w])
		{
			DFS(G, w);
		}
	}
	time = time + 1; finishTime[v] = time;
}
