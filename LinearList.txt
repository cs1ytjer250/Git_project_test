###################################     线性表   ######################################



// 链表：1. 删除值最小的节点
LinkList Delete_Min(LinkList &L)
{
	LNode *pre = L, *p = pre->next;
	LNode *minpre = pre, *minp = p;
	while(p != NULL)
	{
		if(p->data < minp->data)
		{
			minp = p;
			minpre = pre;
		}
		pre = p;
		p = p->next;
	}
	minpre->next = minp->next;
	free(minp);
	return L;
}



// 链表：2. 就地逆置单链表
// 解法1 (头插法)
LinkList Reverse_1(LinkList L)
{
	LNode *p, *r;
	p = L->next;
	L->next = NULL;
	while(p != NULL)
	{
		r = p->next;
		p->next = L->next;
		L->next = p;
		p = r;
	}
	return L;
}

// 解法2：将指针翻转（指向后继改为指向前驱），完成逆置
LinkList Reverse_2(LinkList L)
{
	LNode *pre, *p = L->next, *r = p->next;		// p为第一个节点，r为p的下一个节点
	p->next = NULL;			// 将p的next指向空
	while(r != NULL)
	{
		pre = p;			// 将pre指向p
		p = r;			// 将p挪到r
		r = r->next;		// 将r移向r的下一个节点
		p->next = pre;		// p的next指向pre
	}
	L->next = p;			// 最后用头结点链接p完成逆置
	return L;
}



// 链表：3.递增排序单链表(直接插入排序)

void Sort(LinkList &L)
{
	LNode *p = L->next, *pre;			// p为第一个节点
	LNode *r = p->next;			// r为p的下一个节点
	p->next = NULL;				// 将第一个节点断链
	p = r;					// p指向r
	while(p != NULL)
	{
		r = p->next;			// r指向p的下一个节点
		pre = L;				// pre指向头结点
		while(pre->next != NULL && pre->next->data < p->data)	
			pre = pre->next;	// 第一个节点不为空，且第一个节点的元素小于p节点的元素，pre想后移，循环出来后，p会指向第一个大于等于第一个节点元素的节点
		p->next = pre->next;	// 将p节点链接到pre节点之后
		pre->next = p;
		p = r;			// 再将p移到r
	}
}



// 链表：4.删除单链表中介于s和t之间的元素
void RangeDelete(LinkList &L, int min, int max)
{
	LNode *pr = L, *p = L->link;
	while(p != NULL)
	{
		if(p->data > min && p->data < max)
		{
			pr->link = p->link;
			free(p);
			p = pr->link;
		}
		else
		{
			pr = p;
			p = p->link;
		}
	}
}



// 链表：5.增序输出单链表，并同时进行空间释放

void Min_Delete(LinkList &head)
{
	while(head->next != NULL)
	{
		LNode *pre = head;			// pre为头节点
		LNode *p = pre->next;		// p为第一个节点
		LNode *u;
		while(p->next != NULL)
		{
			if(p->next->data < pre->next->data)
				pre = p;		// 若p的下一个节点的元素小于头结点下一个元素，则将pre指向p
			p = p->next;		// p移向下一个节点
		}
		print(pre->next->data);		// 打印pre的下一个节点
		u = pre->next;			// u指向pre的下一个节点
		pre->next = u->next;		// pre指向再下一个节点
		free(u);				// 释放u
	}
	free(head);				// 释放头结点
}



// 链表：5.将一个链表分解为两个链表，a链表保存序号为奇数的元素，b链表保存序号为偶数的元素

LinkList DisCreat_1(LinkList &a)
{
	int i = 0;
	LinkList b = (LNode *)malloc(sizeof(LNode));
	b->next = NULL;
	LNode *ra = a, *rb = b, *p;
	
	p = a->next;			// p为链表a的第一个节点
	a->next = NULL;			// 将a链表的头结点断链
	while(p != NULL)
	{
		i++;			// 序号计数
		if(i % 2 == 0)		// 偶元素
		{
			rb->next = p;	// 链表b保存偶元素
			rb = p;
		}
		else
		{
			ra->next = p;	// 链表a保存寄元素
			ra = p;
		}
		p = p->next;		// p往后移
	}
	ra->next = NULL;			// 将最后一个节点的next指向NULL
	rb->next = NULL;
	return b;
}




// 链表：6.找到两个链表中的公共节点

LinkList Search_1st_Common(LinkList L1,LinkList L2)
{
	int len1 = Length(L1), len2 = Length(L2);
	int dist;
	LinkList longList, shortList;
	if(len1 > len2)
	{
		longList = L1->next; shortList = L2->next;
		dist = len1 - len2;
	}
	else
	{
		longList = L2->next; shortList = L1->next;
		dist = len2 - len1;
	}
	while(dist--)
		longList = longList->next;
	while(longList != NULL)
	{
		if(longList == shortList)
			return longList;
		else
		{
			longList = longList->next;
			shortList = shortList->next;
		}
	}
	return NULL;
}


// 链表：7.删除有序单链表中，重复的元素
void Del_Same(LinkList &L)
{
	LNode *p = L->next, *q;
	if(p == NULL)
		return;
	while(p->next != NULL)
	{
		q = p->next;
		if(p->data == q->data)
		{
			p->next = q->next;
			free(q);
		}
		else
			p = p->next;
	}
}


// 链表：8.将两个增序排列的单链表归并为一个减序排列的单链表
void MergeList(LinkList &La, LinkList &Lb)
{
	LNode *r, *pa = La->next, *pb = Lb->next;
	La->next = NULL;
	
	while(pa && pb)
	{
		if(pa->data <= pb->data)
		{
			r = pa->next;
			pa->next = La->next;
			La->next = pa;
			pa = r;
		}
		else
		{
			r = pb->next;
			pb->next = La->next;
			La->next = pb;
			pb = r;
		}
	}
	if(pa)
		pb = pa;
	while(pb)
	{
		r = pb->next;
		pb->next = La->next;
		La->next = pb;
		pb = r;
	}
	free(Lb);
}



// 链表：9.建立一个单链表，保存另外两个单链表中的公共元素。
void Get_Common(LinkList a, LinkList b)
{
	LNode *p = a->next, *q = b->next, *r, *s;
	LinkList c = (LinkList)malloc(sizeof(LNode));
	r = c;
	while(p != NULL && q != NULL)
	{
		if(p->data < q->data)
			p = p->data;
		else if(p->data > q->data)
			q = q->data;
		else
		{
			s = (LNode*)malloc(sizeof(LNode));
			s->data = p->data;
			r->next = s;
			r = s;
			p = p->next;
			q = q->next;
		}
	}
	r->next = NULL;
}



// 链表：10.找出两个单链表中的交集，并用第一个链表保存

LinkList Union(LinkList &la, LinkList &lb)
{
	LNode *pa = la->next;
	LNode *pb = lb->next;
	Lnode *u, *pc = la;
	while(pa && pb)
	{
		if(pa->data == pb->data)
		{
			pc->next = pa;
			pc = pa;
			pa = pa->next;
			u = pb;
			pb = pb->next;
			free(u);
		}
		else if(pa->data < pb->data)
		{
			u = pa;
			pa = pa->next;
			free(u);
		}
		else
		{
			u = pb;
			pb = pb->next;
			free(u);
		}
	}
	while(pa)
	{
		u = pa;
		pa = pa->next;
		free(u);
	}
	while(pb)
	{
		u = pb;
		pb = pb->next;
		free(u);
	}
	pc->next = NULL;
	free(lb);
	return la;
}

#####################################################


// 16：判断b链表是否是a链表的子序列(不带头节点)
int Pattern(LinkList a, LinkList b)
{
	LNode *p = a;
	LNode *pre = p;
	LNode *q = b;
	while(p && a)
	{
		if(p->data == q->data)
		{
			p = p->next;
			q = q->next;
		}
		else
		{
			pre = pre->next;
			p = pre;
			q = b;
		}
	}
	if(q == NULL)
		return 1;
	else
		return 0;
}


// 17:判断循环双链表是否对称

int Symmetry(DLinkList L)
{
	DNode *p = L->next, *q = L->prior;
	while(p != q && q->next != p)
	{
		if(p->data == q->data)
		{
			p = p->next;
			q = q->prior;
		}
		else
			return 0;
	}
	return 1;
}


// 18: 拼接两个循环单链表

LinkList Link(LinkList &h1, LinkList &h2)
{
	LNode *p, *q;
	p = h1;
	while(p->next != h1)
		p = p->next;
	q = h2;
	while(q->next != h2)
		q = q->next;
	p->next = h2;
	q->next = h1;
	return h1;
}




// 链表：19.删除循环单链表中值最小的元素

void Del_All(LinkList &L)
{
	LNode *p, *pre, *minp, *minpre;
	while(L->next != L)
	{
		p = L->next; pre = L;
		minp = p; minpre = pre;
		while(p != L)
		{
			if(p->data < minp->data)
			{
				minp = p;
				minpre = pre;
			}
			pre = p;
			p = p->next;
		}
		printf("%d", minp->data);
		minpre->next = minp->next;
		free(minp);
	}
}



//*** 链表：20.按频度排序一个双链表（频度递减）   ***
DLinkList Locate(DLinkList &L, int x)
{
	DNode *p = L->next, *q;
	while(p && p->data != x)
		p = p->next;
	if(p)
		exit(0);
	else
	{
		p->freq++;
		if(p->pre == L || p->pre->freq > p->freq)
			return p;
		if(p->next != NULL) p->next->pre = p->pre;
		p->pre->next = p->next;
		q = p->pre;
		while(q != L && q->freq <= p->freq)
			q = q->pre;
		p->next = q->next;
		if(q->next != NULL) q->next->pre = p;
		p->pre = q;
		q->next = p;
	}
	return p;
}


// 链表：21.判断一个单链表是否有环

LNode *FindLoopStart(LNode *head)
{
	LNode *fast = head, *slow = head;
	while(fast != NULL && fast->next != NULL)
	{
		slow = slow->next;
		fast = fast->next->next;
		if(slow == fast) break;
	}
	if(slow == NULL || fast->next == NULL)
		return NULL;
	LNode *p1 = head, *p2 = slow;
	while(p1 != p2)
	{
		p1 = p1->next;
		p2 = p2->next;
	}
	return p1;
}


// 链表：22.找出单链表中倒数第K个元素

int Search_k(LinkList list, int k)
{
	LNode *p = list->link, *q = list->link;
	int count = 0;
	while(p != NULL)
	{
		if(count < k) count++;
		else q = q->link;
		p = p->link;
	}
	if(count < k)
		return 0;
	else
	{
	 	cout << "%d" << q->data << endl;
		return 1;
	 }
}



// 链表：23.找出两个单链表中公共节点

// 求表长
int listLen(SNode *head)		// 不取地址传参，用头结点指针作为工作指针
{
	int len = 0;
	while(head->next != NULL)
	{
		len++;
		head = head->next;
	}
	return len;
}

SNode* find_addr(SNode *str1, SNode *str2)
{
	int m, n;
	SNode *p, *q;
	m = listLen(str1);
	n = listLen(str2);
	for(p = str1; m > n; m--)
		p = p->next;
	for(q = str2; m < n; n--)
		q = q->next;
	while(p->next != NULL && p->next != q->next)
	{
		p = p->next;
		q = q->next;
	}
	return p->next;
}



// 链表：24.删除单链表中，绝对值相等的所有元素

void func(PNODE h, int n)
{
	PNODE p = h, r;
	int *q, m;
	q = (int *)malloc(sizeof(int) * (n + 1));
	for(int i = 0; i < n + 1; i++)
		*(q + i) = 0;
	while(p->link != NULL)
	{
		m = p->link->data > 0 ? p->link->data : -(p->link->data);
		if(*(q + m) == 0)
		{
			*(q + m) = 1;
			p = p->link;
		}
		else
		{
			r = p->link;
			p->link = r->link;
			free(r);
		}
	}
	free(q);
}




// 链表：25.将单链表重新排序（1,2,3,4,5,6）->（1,5,2,4,3,6）

void change_list(NODE *h)
{
	NODE *p, *r, *s, *q;
	p = q = h;
	while(q->next != NULL)			// 找到链表的中间节点
	{
		p = p->next;
		q = q->next;
		if(q->next != NULL) q = q->next;
	}
	q = p->next;
	p->next = NULL;
	while(q != NULL)				// 逆置后半部分
	{
		r = q->next;
		q->next = p->next;
		p->next = q;
		q = r;
	}
	s = h->next;
	q = p->next;
	p->next = NULL;
	while(q != NULL)				// 开始插入
	{
		r = q->next;
		q->next = s->next;
		s->next = q;
		s = q->next;
		q = r;
	}
}
